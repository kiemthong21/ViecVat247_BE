// <auto-generated />
using System;
using BussinessObject.Viecvat247Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(Viecvat247DBcontext))]
    [Migration("20231214144941_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BussinessObject.Models.Application", b =>
                {
                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Aid"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<double?>("Money")
                        .HasColumnType("float");

                    b.Property<DateTime?>("RateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Voting")
                        .HasColumnType("float");

                    b.HasKey("Aid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("JobId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Customer", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cid"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("CV")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("Cemail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrition")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Epoint")
                        .HasColumnType("bigint");

                    b.Property<int?>("FrofileStatus")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifyCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Voting")
                        .HasColumnType("float");

                    b.HasKey("Cid");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.CustomerRoom", b =>
                {
                    b.Property<int>("CustomerRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerRoomId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("CustomerRoomId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("CustomerRoom", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.CustomerSkill", b =>
                {
                    b.Property<int>("CustomerSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerSkillId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CustomerSkillId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkillId");

                    b.ToTable("CustomerSkill", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Job", b =>
                {
                    b.Property<int>("JobsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobsId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<bool?>("IsSendMail")
                        .HasColumnType("bit");

                    b.Property<int?>("JobAssignerId")
                        .HasColumnType("int");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Job_Overview")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Location")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<double?>("Money")
                        .HasColumnType("float");

                    b.Property<string>("NoticeToJobSeeker")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("NumberPerson")
                        .HasColumnType("int");

                    b.Property<string>("Preferred_Skills")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Required_Skills")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeJobs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("WorkingTime")
                        .HasColumnType("float");

                    b.HasKey("JobsId");

                    b.HasIndex("JobAssignerId");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.JobsCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("JobCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobsCategory", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.JobsSkill", b =>
                {
                    b.Property<int>("JobsSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobsSkillId"), 1L, 1);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobsSkillId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobsSkill", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int?>("Aid")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JobId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.ReasonForEditingJobStatus", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rid"), 1L, 1);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("NumberProcessingTime")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Rid");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("ReasonForEditingJobStatus", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<int?>("Cid")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeFeedback")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Uid")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("Cid");

                    b.HasIndex("Uid");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.ReportImage", b =>
                {
                    b.Property<int>("ReportImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportImageId"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("ImageType")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("ReportImageId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImage", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int?>("NumberCustommer")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoomId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("SkillCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeSkill")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.SkillCategory", b =>
                {
                    b.Property<int>("SkillCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillCategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<string>("SkillCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SkillCategoryId");

                    b.ToTable("SkillCategory", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<string>("BankCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankTranNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CardType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<long?>("Epoint")
                        .HasColumnType("bigint");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<long?>("NewBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<long?>("OldBalance")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Paymentdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("SecureHash")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TxnRef")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JobId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.TypeManager", b =>
                {
                    b.Property<int>("TypeManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeManagerId"), 1L, 1);

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeManagerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeManagerId");

                    b.ToTable("TypeManager", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.TypeManagerUser", b =>
                {
                    b.Property<int>("TypeManagerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeManagerUserId"), 1L, 1);

                    b.Property<int>("TypeManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("TypeManagerUserId");

                    b.HasIndex("TypeManagerId");

                    b.HasIndex("Uid");

                    b.ToTable("TypeManagerUser", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1255)
                        .HasColumnType("nvarchar(1255)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uemail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Uid");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Application", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Applicant")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BussinessObject.Models.CustomerRoom", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("CustomerRooms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Room", "Room")
                        .WithMany("CustomerRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BussinessObject.Models.CustomerSkill", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("CustomerSkills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Skill", "Skill")
                        .WithMany("CustomerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("BussinessObject.Models.Job", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "JobAssigner")
                        .WithMany("Jobs")
                        .HasForeignKey("JobAssignerId");

                    b.HasOne("BussinessObject.Models.JobsCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId");

                    b.Navigation("JobAssigner");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("BussinessObject.Models.JobsSkill", b =>
                {
                    b.HasOne("BussinessObject.Models.Job", "Job")
                        .WithMany("JobsSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Skill", "Skill")
                        .WithMany("JobsSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("BussinessObject.Models.Message", b =>
                {
                    b.HasOne("BussinessObject.Models.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId");

                    b.HasOne("BussinessObject.Models.Customer", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId");

                    b.Navigation("Room");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BussinessObject.Models.Notification", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BussinessObject.Models.Job", "Job")
                        .WithMany("Notifications")
                        .HasForeignKey("JobId");

                    b.Navigation("Customer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BussinessObject.Models.ReasonForEditingJobStatus", b =>
                {
                    b.HasOne("BussinessObject.Models.Job", "Job")
                        .WithMany("ReasonForEditingJobStatus")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.User", "User")
                        .WithMany("ResionEditStatusJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Models.Report", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("Reports")
                        .HasForeignKey("Cid");

                    b.HasOne("BussinessObject.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("Uid");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Models.ReportImage", b =>
                {
                    b.HasOne("BussinessObject.Models.Report", "Report")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BussinessObject.Models.Skill", b =>
                {
                    b.HasOne("BussinessObject.Models.SkillCategory", "SkillCategory")
                        .WithMany("Skills")
                        .HasForeignKey("SkillCategoryId");

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("BussinessObject.Models.Transaction", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BussinessObject.Models.Job", "Job")
                        .WithMany("Transactions")
                        .HasForeignKey("JobId");

                    b.HasOne("BussinessObject.Models.Customer", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Customer");

                    b.Navigation("Job");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("BussinessObject.Models.TypeManagerUser", b =>
                {
                    b.HasOne("BussinessObject.Models.TypeManager", "TypeManager")
                        .WithMany("TypeManagerUsers")
                        .HasForeignKey("TypeManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.User", "User")
                        .WithMany("TypeManagerUsers")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeManager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Models.Customer", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CustomerRooms");

                    b.Navigation("CustomerSkills");

                    b.Navigation("Jobs");

                    b.Navigation("MessageSenders");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BussinessObject.Models.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobsSkills");

                    b.Navigation("Notifications");

                    b.Navigation("ReasonForEditingJobStatus");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BussinessObject.Models.JobsCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BussinessObject.Models.Report", b =>
                {
                    b.Navigation("ReportImages");
                });

            modelBuilder.Entity("BussinessObject.Models.Room", b =>
                {
                    b.Navigation("CustomerRooms");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BussinessObject.Models.Skill", b =>
                {
                    b.Navigation("CustomerSkills");

                    b.Navigation("JobsSkills");
                });

            modelBuilder.Entity("BussinessObject.Models.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("BussinessObject.Models.TypeManager", b =>
                {
                    b.Navigation("TypeManagerUsers");
                });

            modelBuilder.Entity("BussinessObject.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("ResionEditStatusJobs");

                    b.Navigation("TypeManagerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
